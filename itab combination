*&---------------------------------------------------------------------*
REPORT zsf_itab_combination.

TYPES: BEGIN OF alphatab_type,
         cola TYPE string,
         colb TYPE string,
         colc TYPE string,
       END OF alphatab_type.
TYPES: alphas TYPE STANDARD TABLE OF alphatab_type WITH EMPTY KEY.


TYPES: BEGIN OF numtab_type,
         col1 TYPE string,
         col2 TYPE string,
         col3 TYPE string,
       END OF numtab_type.
TYPES: nums TYPE STANDARD TABLE OF numtab_type WITH EMPTY KEY.


TYPES: BEGIN OF combined_data_type,
         colx TYPE string,
         coly TYPE string,
         colz TYPE string,
       END OF combined_data_type.
TYPES combined_data TYPE STANDARD TABLE OF combined_data_type WITH EMPTY KEY.



DATA(gt_alpha) = VALUE alphas( ( cola = 'A' colb = 'B' colc = 'C' )
                               ( cola = 'D' colb = 'E' colc = 'F' )
                               ( cola = 'G' colb = 'H' colc = 'I' )

).

DATA(gt_nums) = VALUE nums( ( col1 = 1 col2 = 2 col3 = 3 )
                            ( col1 = 4 col2 = 5 col3 = 6 )
                            ( col1 = 7 col2 = 8 col3 = 9 ) ).

#################################################
DATA lv_loop_index  TYPE i .
DATA lv_do_index  TYPE i .
DATA ls_combined TYPE combined_data_type .
DATA lt_combined TYPE TABLE OF combined_data_type .
FIELD-SYMBOLS <fs_field1> TYPE any .
FIELD-SYMBOLS <fs_field2> TYPE any .
FIELD-SYMBOLS <fs_field_comp> TYPE any .



LOOP AT gt_alpha INTO DATA(ls_alpha).
  lv_loop_index = lv_loop_index + 1 .

  CLEAR  lv_do_index .

  READ TABLE gt_nums INTO DATA(gs_nums) INDEX lv_loop_index .
  CHECK sy-subrc = 0 .

  DO 3 TIMES.
    lv_do_index = lv_do_index + 1 .

    ASSIGN COMPONENT lv_do_index OF STRUCTURE ls_alpha TO <fs_field1> .
    CHECK sy-subrc = 0 .
    ASSIGN COMPONENT lv_do_index OF STRUCTURE gs_nums TO <fs_field2> .
    CHECK sy-subrc = 0 .
    ASSIGN COMPONENT lv_do_index OF STRUCTURE ls_combined TO <fs_field_comp> .
    CHECK sy-subrc = 0 .
    CONCATENATE <fs_field1> <fs_field2>  INTO <fs_field_comp> .




  ENDDO.


  APPEND ls_combined  TO lt_combined .
  CLEAR ls_combined .

ENDLOOP.


BREAK-POINT.

##############modern solutions#################

    combined_data = value #( for ls_alpha in alphas index into lv_index ( colx = ls_alpha-cola && value string( nums[ lv_index ]-col1 optional )
                                                                          coly = ls_alpha-colb && value string( nums[ lv_index ]-col2 optional )
                                                                          colz = ls_alpha-colc && value string( nums[ lv_index ]-col3 optional ) ) ).

############################################

    combined_data = VALUE #( FOR i = 1 until i > lines( alphas ) (
      colx = |{ alphas[ i ]-cola }{ nums[ i ]-col1 }|
      coly = |{ alphas[ i ]-colb }{ nums[ i ]-col2 }|
      colz = |{ alphas[ i ]-colc }{ nums[ i ]-col3 }|
    ) ).

###############################################

combined_data = VALUE #( FOR <alpha> IN alphas INDEX INTO index
                             ( colx = <alpha>-cola && nums[ index ]-col1
                               coly = <alpha>-colb && nums[ index ]-col2
                               colz = <alpha>-colc && nums[ index ]-col3
                             )
                           ).

##############################################
DATA lv_i TYPE i.
    DATA ls_combo TYPE combined_data_type.
    lv_i = 1.
    DO lines( alphas ) TIMES.
        CONCATENATE alphas[ lv_i ]-cola nums[ lv_i ]-col1 INTO ls_combo-colx.
        CONCATENATE alphas[ lv_i ]-colb nums[ lv_i ]-col2 INTO ls_combo-coly.
        CONCATENATE alphas[ lv_i ]-colc nums[ lv_i ]-col3 INTO ls_combo-colz.
        APPEND ls_combo TO combined_data.
        lv_i += 1.
    ENDDO.
